public class Solution {
    public List<List<Integer>> combine(int n, int k) {
        List<List<Integer>> res = new ArrayList<>();
        if (k == 1) {
        	for (int i = 1; i <= n; i++) {
        	    List<Integer> temp = new ArrayList<>();
        		temp.add(i);
        		res.add(temp);
        	}
        	return res;
        }
        if (k == n) {
        	List<Integer> temp = new ArrayList<>();
        	for (int i = 1; i <= n; i++) {
        		temp.add(i);	
        	}
        	res.add(temp);
        	return res;
        }
        res.addAll(combine(n - 1, k));
        List<List<Integer>> last = combine(n - 1, k - 1);
        for (List<Integer> i : last) {
        	i.add(n);
        }
        res.addAll(last);
        
        return res;
    }
    
    
    public class Solution {
    public ArrayList<ArrayList<Integer>> combine(int n, int k) {
        ArrayList<ArrayList<Integer>> rst = new ArrayList<ArrayList<Integer>>();
        ArrayList<Integer> solution = new ArrayList<Integer>();
        
        helper(rst, solution, n, k, 1);
        return rst;
    }
    
    private void helper(
        ArrayList<ArrayList<Integer>> rst, 
        ArrayList<Integer> solution, 
        int n, 
        int k, 
        int start) {

        if (solution.size() == k){
            rst.add(new ArrayList(solution));
            return;
        }
        
        for(int i = start; i<= n; i++){
            solution.add(i);
            
            // the new start should be after the next number after i
            helper(rst, solution, n, k, i+1); 
            solution.remove(solution.size() - 1);
        }
    }
}
    

}
