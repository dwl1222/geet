/**
 * Definition for undirected graph.
 * class UndirectedGraphNode {
 *     int label;
 *     List<UndirectedGraphNode> neighbors;
 *     UndirectedGraphNode(int x) { label = x; neighbors = new ArrayList<UndirectedGraphNode>(); }
 * };
 */
public class Solution {
    public UndirectedGraphNode cloneGraph(UndirectedGraphNode node) {
        if (node == null) {
            return null;
        }
        List<UndirectedGraphNode> list = new ArrayList<>();
        HashMap<UndirectedGraphNode, UndirectedGraphNode> map = new HashMap<>();
        list.add(node);
        for (int i = 0; i < list.size(); i++) {
            UndirectedGraphNode old = list.get(i);
            UndirectedGraphNode copy = new UndirectedGraphNode(old.label);
            map.put(old, copy);
            for (UndirectedGraphNode next : old.neighbors) {
                if (!map.containsKey(next)) {
                    list.add(next);
                }
            }
        }
        
        for (int i = 0; i < list.size(); i++) {
            UndirectedGraphNode old = list.get(i);
            UndirectedGraphNode copy = map.get(old);
            for (UndirectedGraphNode next : old.neighbors) {
                copy.neighbors.add(map.get(next));
            }
        }
        
        return map.get(node);
    }
}


Input:
{0,1,5#1,2,5#2,3#3,4,4#4,5,5#5}
Output:
{0,1,5#1,2,5#2,3#3,4,4#4,5,5,5,5#5}
Expected:
{0,1,5#1,2,5#2,3#3,4,4#4,5,5#5}
