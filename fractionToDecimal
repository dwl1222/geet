public class Solution {
    public String fractionToDecimal(int numerator, int denominator) {
        StringBuilder sb  = new StringBuilder();
        HashMap<Integer, Integer> map = new HashMap<>();
        int rem = numerator % denominator;
        sb.append(numerator / denominator);
        if (rem == 0) {
            return sb.toString();
        }
        sb.append('.');
        StringBuilder aft  = new StringBuilder();
        int pos = 0;
        while (rem != 0) {
            numerator = rem * 10;
            rem = numerator % denominator;
            div = numerator / denominator;
            if (map.contains(rem)) {
                aft.insert(map.get(rem), '(');
                aft.append(')');
                break; 
            } else {
                map.put(rem, pos);
            }
            aft.append(div);
            pos++;
        }
        sb.append(aft);
        
        return sb.toString();
    }
    
    public String fractionToDecimal(int numerator, int denominator) {
    StringBuilder result = new StringBuilder();
    String sign = (numerator < 0 == denominator < 0 || numerator == 0) ? "" : "-";
    long num = Math.abs((long) numerator);
    long den = Math.abs((long) denominator);
    result.append(sign);
    result.append(num / den);
    long remainder = num % den;
    if (remainder == 0)
        return result.toString();
    result.append(".");
    HashMap<Long, Integer> hashMap = new HashMap<Long, Integer>();
    while (!hashMap.containsKey(remainder)) {
        hashMap.put(remainder, result.length());
        result.append(10 * remainder / den);
        remainder = 10 * remainder % den;
    }
    int index = hashMap.get(remainder);
    result.insert(index, "(");
    result.append(")");
    return result.toString().replace("(0)", "");
}
}
