public class Solution {
    public int shortestDistance(String[] words, String word1, String word2) {
      int prev = -1;
      int min = words.length - 1;
      for (int i = 0; i < words.length; i ++) {
        if(words[i].equals(word1) || words[i].equals(word2)) {
          if (prev >= 0 && !words[i].equals(words[prev])) {
            min = Math.min(i - prev, min);
          }
          prev = i;
        }
      }
      
      return min;
    }
    
public class WordDistance {
    private HashMap<String, List<Integer>> map;
    public WordDistance(String[] words) {
        map = new HashMap<>();
        for (int i = 0; i < words.length; i ++) {
            String s = words[i];
            if (!map.containsKey(s)) {
                map.put(s, new ArrayList<Integer>());
            } 
            map.get(s).add(i);
        }
    }

    public int shortest(String word1, String word2) {
        List<Integer> list1 = map.get(word1);
        List<Integer> list2 = map.get(word2);
        int min = Integer.MAX_VALUE;
        int p1 = 0;
        int p2 = 0;
        while (p1 < list1.size() && p2 < list2.size()) {
            min = Math.min(min, Math.abs(list1.get(p1) - list2.get(p2)));
            if (list1.get(p1) < list2.get(p2)) {
                p1 ++;
            } else {
                p2 ++;
            }
        }
        
        return min;
    }
}
}
