public class Solution {
	private static final int[][] DIRS = new int[][]{{1,0},{-1,0},{0,1},{0,-1}};
    public int numIslands(char[][] grid) {
        if (grid == null || grid.length == 0 || grid[0].length == 0) {
        	return 0;
        }
        
        int m = grid.length;
        int n = grid[0].length;
        int count = 0;
        
        for (int i = 0; i < m; i++) {
        	for (int j = 0; j < n; j++) {
        		if (grid[i][j] == '1') {
        			dfs(grid, i, j);
        			count++;
        		}
        	}
        }
        
        return count;
    }
    
    public void dfs(char[][] grid, int i, int j) {
    	if (i < 0 || i >= grid.length || j < 0 || j >= grid[0].length || grid[i][j] != '1') {
    		return;
    	}
    	grid[i][j] = '#';
    	for (int[] d : DIRS) {
    		dfs(grid, i + d[0], j + d[1]);
    	}
    	return;
    }
}
