class Node{
    int val;
    List<Node> parents;
    Node(int v) {
        val = v;
        parents = new ArrayList<Node>();
    }
}

public Node lca(Node node1, Node node2) {
    Node res = null;
    HashMap<Node, Integer> levelMap1 = new HashMap<>();
    HashMap<Node, Integer> levelMap2 = new HashMap<>();
    bfs(node1, levelMap1);
    bfs(node2, levelMap2);
    int min = Integer.MAX_VALUE;
    for (Node n : levelMap1.keySet()) {
        if (levelMap2.containsKey(n) && levelMap1.get(n) + levelMap2.get(n) < min) {
            min = levelMap1.get(n) + levelMap2.get(n);
            res = n;
        }
    }
    
    return res;
}

private void bfs(Node node, HashMap<Node, Integer> levelMap) {
    LinkedList<Node> curLevel = new LinkedList<>();
    curLevel.offer(node);
    int level = 0;
    levelMap.put(node, level ++);
    while (!curLevel.isEmpty()) {
        LinkedList<Node> nextLevel = new LinkedList<>();
        while (!curLevel.isEmpty()) {
            Node cur = queue.poll();
            for (Node p : cur.parents) {
                if (!levelMap.containsKey(p)) {
                    level.put(p, level);
                    nextLevel.offer(p);
                }
            }
        }
        curLevel = nextLevel;
        level ++;
    }
    
    return;
}


public class valComparator implements Comparator<Node> {
    public int compare(Node o1, Node o2) {
        return o1.val - o2.val;
    }
}
class fNode {
    int val;
    int freq;
    fNode(int v, int f) {
        val = v;
        freq = f;
    }
}
public class freqComparator implements Comparator<fNode> {
    public int compare(fNode o1, fNode o2) {
        return o1.freq - o2.freq;
    }
}

public List<Integer> merge(List<Node> nodes, int k) {
    List<fNode> freqNodes = new ArrayList<>();
    PriorityQueue<Node> pq = new PriorityQueue<>(k, new valComparator());
    for (Node n : nodes) {
        pq.offer(n);
    }
    int save = pq.peek().val;
    int count = 0;
    while (!pq.isEmpty()) {
        Node min = pq.poll();
        if (min.val != save ) {
            freqNodes.add(new fNode(save, count));
            count = 1;
        } else {
            count ++;
        }
        save = min.val;
        while (min != null && min.val == save) {
            min = min.next;
        }
        if (min != null) {
            pq.offer(min);
        }
    }
    freqNodes.add(save, count);
    
    
}


public List<Integer> merge(List<Node> nodes, int k) {
    HashMap<Integer, Integer> map = new HashMap<>();
    for (Node head : nodes) {
        int prev = Integer.MIN_VALUE;
        while (head != null) {
            if (head.val != prev) {
                if (map.containsKey(head.val)) {
                    map.put(head.val, map.get(head.val) + 1);
                } else {
                    map.put(head.val, 1);
                }
            }
            prev = head.val;
            head = head.next;
        }
    }
    List<freqNode> res = new ArrayList<>();
    for (int i : map.keySet()) {
        if (map.get(i) >= k) {
            res.add(new fNode(i, map.get(i)));
        }
    }
    
    Arrays.sort(res, new freqComparator());
    
    return res;
}
