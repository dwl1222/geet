/**
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public void reorderList(ListNode head) {
        int length = getLength(head);
        if (length <= 2){
            return;
        }
        
        ListNode node = head;
        for (int i = 1; i < length / 2 + (length % 2 == 1 ? 1 : 0); i++){
            node = node.next;
        }
        ListNode second = node.next;
        node.next = null;
        second = reverse(second);
        head = merge(head, second);
        return; 
    }
    
    public int getLength(ListNode head){
        int res = 0;
        while (head != null){
            head = head.next;
            res++;
        }
        
        return res;
    }
    
    public ListNode reverse(ListNode head){
        ListNode nextNode = null;
        ListNode tail = head;
        while (tail.next != null){
            tail = tail.next;
        }
        for (ListNode cur = head; cur != tail; cur = nextNode){
            nextNode = cur.next;
            cur.next = tail.next;
            tail.next = cur;
        }
        
        return tail;
    }
    
    public ListNode merge(ListNode head1, ListNode head2){
        ListNode cur1 = head1;
        ListNode cur2 = head2;
        ListNode nextNode = null;
        while (cur2 != null){
            nextNode = cur2.next;
            cur2.next = cur1.next;
            cur1.next = cur2;
            cur1 = cur2.next;
            cur2 = nextNode;
        }
        
        return head1;
    }
}
