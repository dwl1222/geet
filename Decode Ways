public class Solution {

  /*
    Space:O(n) runtime: O(n)
  */
    public int numDecodings(String s) {
        
        int l = s.length();
        if(l == 0)
            return 0;
        int[] dp = new int[l+1];
        dp[0] = 1;
        dp[1] = Integer.parseInt(s.substring(0,1)) == 0 ? 0:1;
        
        for(int i = 2; i < l+1 ; i++){
             int x = Integer.parseInt(s.substring(i-1,i))  ;
             int y	=	 Integer.parseInt(s.substring(i-2,i)) ;
             dp[i] = (x == 0 ? 0 :dp[i-1]) +(y<10 || y> 26 ? 0 : dp[i-2]);
        }
        return dp[l];
    }
    
    
         /**
     * Reduce space to O(1)
     */
    public static int numDecodingsOptimal(String s) {
        if (s == null || s.length() == 0) return 0;
        int len = s.length();
        int prev1 = 1;
        int prev2 = s.charAt(0) == '0' ? 0 : 1;
        for (int i = 2; i <= len; i++) {
            int code1 = Integer.valueOf(s.substring(i - 1, i)); // 1 digit
            int code2 = Integer.valueOf(s.substring(i - 2, i)); // 2 digits
            int temp = prev2;
            prev2 = (code1 != 0 ? prev2 : 0) + (code2 <= 26 && code2 > 9 ? prev1 : 0);
            prev1 = temp;
        }
        return prev2;
    }
}
