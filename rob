public class Solution {

	// TLE recursion 
    public int rob(int[] nums) {
        if (nums == null || nums.length == 0) {
        	return 0;
        }
        
        return rob(nums, nums.length);
    }
    
    public int rob(int[] nums, int n) {
    	if (n == 1) {
    		return nums[0];
    	}
    	
    	if (n == 2) {
    		return Math.max(nums[0], nums[1]);
    	}
    
    	return Math.max(rob(nums, n - 1), rob(nums, n - 2) + nums[n - 1]);
    }
    
    // dp AC
    public int rob(int[] nums) {
    	if (nums == null || nums.length == 0) {
    		return 0;
    	}
    
        int[] dp = new int[nums.length + 1];
        dp[0] = 0;
        dp[1] = nums[0];
        for (int i = 2; i <= nums.length; i++) {
        	dp[i] = Math.max(dp[i - 1], dp[i - 2] + nums[i - 1]);
        }
        
        return dp[nums.length];
    }
    
    // dp improve
    public int rob(int[] nums) {
    	if (nums == null || nums.length == 0) {
    		return 0;
    	}
    
        int first = 0;
        int second = nums[0];
        for (int i = 2; i <= nums.length; i++) {
        	int temp = Math.max(second, first + nums[i - 1]);
        	first = second;
        	second = temp;
        }
        
        return second;
    }
}
