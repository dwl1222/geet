/**
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public ListNode sortList(ListNode head) {
        int length = getLength(head);
        return sort(head, length);
    }
    
    public ListNode sort(ListNode head, int length){
        if (length == 0 || length == 1){
            return head;
        }
        
        ListNode first = head;
        ListNode second = head;
        ListNode pre = head;
        for (int i = 0; i < length / 2; i++){
            second = second.next;
        }
        for (int i = 0; i < length / 2 - 1; i++) {
            pre = pre.next;
        }
        pre.next = null;
        first = sort(first, length / 2);
        second = sort(second, length / 2 + (length % 2 == 0 ? 0 : 1));
        
        return merge(first, second);
    }
    
    public ListNode merge(ListNode first, ListNode second){
        ListNode res = new ListNode(0);
        ListNode pre = res;
        while (first != null && second != null){
            if (first.val < second.val){
                pre.next = first;
                first = first.next;
            } else {
                pre.next = second;
                second = second.next;
            }
            pre = pre.next;
        }
        if (first != null){
            pre.next = first;
        }
        if (second != null){
            pre.next = second;
        }
        
        return res.next;
    }
    
    public int getLength(ListNode head){
        ListNode node = head;
        int res = 0;
        while (node != null){
            res++;
            node = node.next;
        }
        
        return res;
    }
}
