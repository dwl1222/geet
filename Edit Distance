//O(mn) space O(mn) time

public class Solution {
    public int minDistance(String word1, String word2) {
        int m = word1.length();
        int n = word2.length();
        int dp[][] = new int[m+1][n+1];
        for(int i = 1; i < m + 1 ; i++)
            dp[i][0] = i;
        for(int j = 1; j < n + 1 ; j++)
            dp[0][j] = j;
        for(int i =1; i < m + 1 ; i++){
            for(int j = 1; j < n+1; j++){
                int temp = Math.min(dp[i-1][j]+1,dp[i][j-1]+1);
                dp[i][j] = Math.min(temp, (word1.charAt(i-1) == word2.charAt(j-1) ? dp[i-1][j-1] : dp[i-1][j-1] + 1));
            }
        }
        
        return dp[m][n];
    }
     /**
     * Reduce space to O(1)
     */
    public static int numDecodingsOptimal(String s) {
        if (s == null || s.length() == 0) return 0;
        int len = s.length();
        int prev1 = 1;
        int prev2 = s.charAt(0) == '0' ? 0 : 1;
        for (int i = 2; i <= len; i++) {
            int code1 = Integer.valueOf(s.substring(i - 1, i)); // 1 digit
            int code2 = Integer.valueOf(s.substring(i - 2, i)); // 2 digits
            int temp = prev2;
            prev2 = (code1 != 0 ? prev2 : 0) + (code2 <= 26 && code2 > 9 ? prev1 : 0);
            prev1 = temp;
        }
        return prev2;
    }
}
