/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public void recoverTree(TreeNode root) {
        List<TreeNode> res = new ArrayList<>();
        List<TreeNode> err = new ArrayList<>();
        inorder(root, res);
        for (int i = 0; i < res.size() - 1; i++) {
        	if (res.get(i).val > res.get(i + 1).val) {
        		err.add(res.get(i));
        		err.add(res.get(i + 1));
        	}
        }
        if (err.size() == 2) {
			swap(err.get(0), err.get(1));
        }
        else {
        	swap(err.get(0), err.get(3));
        }
        
        return;
    }
    
    public void inorder(TreeNode root, List<TreeNode> res) {
    	if (root == null) {
    		return;
    	}
    	
    	inorder(root.left, res);
    	res.add(root);
    	inorder(root.right, res);
    	
    	return res;
    }
    
    public void swap(TreeNode a, TreeNode b) {
    	int temp = a.val;
    	a.val = b.val;
    	b.val = temp;
    }
}
