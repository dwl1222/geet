class Solution {

    int globalMax = Integer.MIN_VALUE;

    public int maxPathSum (TreeNode root) {
        helper(root, new ArrayList<Integer>());
        return globalMax;
    }
    
    public void helper (TreeNode root, List<Integer> nodes) {
        if (root == null) {
            return;
        }
        nodes.add(root.val);
        if (root.left == null && root.right == null) {
            int localMax = subArrMax(nodes);
            globalMax = Math.max(globalMax, localMax);
            nodes.remove(nodes.size() -  1);
            return;
        }
        helper(root.left, nodes);
        helper(root.right, nodes);
        nodes.remove(nodes.size() - 1);
        
        return;
    }
    
    public int subArrMax(List<Integer> list) {
        int maxEndhere = list.get(0);
        int max = list.get(0);
        for (int i = 1; i < list.size(); i++) {
            maxEndhere = Math.max(maxEndhere + list.get(i), list.get(i));
            max = Math.max(maxEndhere, max);
        }
        
        return max;
    }
    
}
