/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode res = new ListNode(0);
        ListNode pre = res;
        ListNode cur = null;
        int carry = 0, val = 0, sum = 0;
        while ((l1 != null && l2 != null) || carry != 0) {
            if (l1 == null && l2 == null) {
                sum = 0;
            } 
            else if (l1 == null) {
                sum = l2.val;
                l2 = l2.next;
            }
            else if (l2 == null) {
                sum = l1.val;
                l1 = l1.next;
            } 
            else {
                sum = l1.val + l2.val;
                l1 = l1.next;
                l2 = l2.next;
            }
            val = (sum + carry) % 10;
            carry = (sum + carry) / 10;
            cur = new ListNode(val);
            pre.next = cur;
            pre = pre.next;
        }
        if (l1 == null) {
            pre.next = l2;
        }
        if (l2 == null) {
            pre.next = l1;
        }
        
        return res.next;
    }
    
    // follow the longer list;
        public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode res = new ListNode(0);
        ListNode pre = res;
        int sum = 0;
        while (l1 != null || l2 != null) {
            if (l1 != null) {
                sum += l1.val;
                l1 = l1.next;
            }
            if (l2 != null) {
                sum += l2.val;
                l2 = l2.next;
            } 
            pre.next = new ListNode(sum % 10);
            sum /= 10;
            pre = pre.next;
        }
        if (sum != 0) {
            pre.next = new ListNode(sum);
        }
        
        return res.next;
    }
}
