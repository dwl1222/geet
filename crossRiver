    // Space O(N) Time worst case O(nlog(n))
    private static int crossRiver(int[] A, int N, int X, int D) {
        if (D >= X) {
            return 0;
        }
        PriorityQueue<Integer> pq = new PriorityQueue<Integer>(N, Collections.reverseOrder());
        int maxCanReach = D;
        for (int i = 0; i < N; i ++) {
            maxCanReach = maxCanReach >= A[i] ? (A[i] + D) : maxCanReach;
            pq.offer(A[i]);
            int max = pq.peek();
            maxCanReach = maxCanReach >= max ? (max + D) : maxCanReach;
            if (maxCanReach >= X) {
                return i;
            }
        }

        return -1;
    }
