/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {

    // recursive solution: Time O(n) Space O(h);
    public List<Integer> inorderTraversal(TreeNode root) {
        List<Integer> res = new ArrayList<>();
        inorderTraversal(root, res);
        
        return res;
    }
    
    public void inorderTraversal(TreeNode root, List<Integer> res){
        if (root == null){
            return;
        }
        
        inorderTraversal(root.left);
        res.add(root.val);
        inorderTraversal(root.right);
        
        return;
    }
    // recursive solution: Time O(n) Space O(h);    
    public List<Integer> inorderTraversal(TreeNode root) {
        List<Integer> res = new ArrayList<>();
        Stack<TreeNode> parentStack = new Stack<>();
        while (root != null || !parentStack.isempty()){
            if (root != null){
                parentStack.push(root);
                root = root.left;
            } else{
                root = parentStack.pop();
                res.add(root.val);
                root = root.right;
            }
        }
        
        return res;
    }
}
