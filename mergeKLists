/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public ListNode mergeKLists(List<ListNode> lists) {
        LinkedList<ListNode> queue = new LinkedList<>();
        queue.addAll(lists);
        while (!queue.isEmpty()) {
            ListNode l1 = queue.poll();
            if (queue.isEmpty()) {
                return l1;
            } else {
                ListNode l2 = queue.poll();
                queue.add(mergeTwoLists(l1, l2));
            }
        }
        
        return null;
    }
    
    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {
        ListNode res = new ListNode(0);
        ListNode cur = res;
        while (l1 != null && l2 != null){
            if (l1.val < l2.val){
                cur.next = l1;
                l1 = l1.next;
                cur = cur.next;
            } else{
                cur.next = l2;
                l2 = l2.next;
                cur = cur.next;
            }
        } // while
        if (l1 == null){
            cur.next = l2;
        } // if l1
        if (l2 == null){
            cur.next = l1;
        } // if l2
        
        return res.next;
    }
}
