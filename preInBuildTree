/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        if (preorder == null || inorder == null || preorder.length == 0 || inorder.length == 0) {
        	return null;
        }
        
        return build(preorder, inorder, 0, preorder.length - 1, 0, inorder.length - 1);
    }
    
    public TreeNode build(int[] preorder, int[] inorder, int preStart, int preEnd, int inStart, int inEnd) {
    	if (preStart > preEnd || inStart > inEnd) {
    		return null;
    	}
    	
    	TreeNode root = new TreeNode(preorder[preStart]);
    	int rootIndex = find(inorder, preorder[preStart]);
    	root.left = build(preorder, inorder, preStart + 1, preStart + rootIndex - inStart, inStart, rootIndex - 1);
    	root.right = build(preorder, inorder,preStart + rootIndex - inStart + 1, preEnd, rootIndex + 1, inEnd);
    	
    	return root;
    }
    
    public int find(int[] inorder, int root) {
    	for (int i = 0; i < inorder.length; i++) {
    		if (inorder[i] == root) {
    			return i;
    		}
    	}
    	
    	return -1;
    }
}
