public class Solution {
    class Course {
        public List<Course> pre = new ArrayList<>();
        private boolean visited;
        private boolean finished;
        private int val;
        
        public Course (int val) {
            this.val = val;
        }
        
        public boolean isVisited() {
            return visited;
        }
        
        public boolean isFinished() {
            return finished;
        }
        
        public boolean hasCycle() {
            if (pre.isEmpty()) {
                return false;
            }
            visited = true;
            for (Course c : pre) {
                if (c.isVisited()) {
                    return true;
                }
                if (c.isFinished()) {
                    continue;
                }
                if (c.hasCycle()) {
                    return true;
                }
            }
            visited = false;
            finished = true;
            
            return false;
        }
        
    }
    
    public boolean canFinish(int numCourses, int[][] prerequisites) {
        if (prerequisites == null || prerequisites.length == 0) {
            return true;
        }
        
        HashMap<Integer, Course> map = new HashMap<>();
        // create a list of courses;
        for (int i = 0 ; i < numCourses; i++) {
            map.put(i, new Course(i));
        }
        
        // add prerequisites to each course
        for (int i = 0; i < prerequisites.length; i++) {
            Course cur = map.get(prerequisites[i][0]);
            cur.pre.add(map.get(prerequisites[i][1]));
        }
        
        // Check for cycle
        for (int i = 0 ; i < numCourses; i++) {
            Course cur = map.get(i);
            if(cur.hasCycle()) {
                return false;
            }
        }
        
        return true;
    }
}
