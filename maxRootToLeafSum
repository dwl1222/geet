	    static int globalMax = Integer.MIN_VALUE;
	    public static int rootToLeafMaxSum(TreeNode root) {
	    	helper(root, 0);
	    	return globalMax;
	    }
	    
	    public static void helper(TreeNode root, int preSum) {
	        if (root == null) {
	            return;
	        }
	        preSum += root.val;
	        if (root.left == null && root.right == null) {
	        	globalMax = Math.max(preSum, globalMax);
	        }
	        helper(root.left, preSum);
	        helper(root.right, preSum);
	        
	        return ;
	    }

	private int globalMin = Integer.MAX_VALUE;
	
	public List<TreeNode> minPath(TreeNode root) {
		List<TreeNode> res = new ArrayList<>();
		helper(root, 0, new ArrayList<TreeNode>(), res);
		
		return res;
	}
	
	private void dfs(TreeNode root, int preSum, List<TreeNode> path, List<TreeNode> res) {
		if (root == null) {
		    return;       
		}
		preSum += root.val;
		path.add(root);
		if (root.left == null && root.right == null) {
		    if (preSum < globalMin) {
		        gloablMin = preSum;
		        res = new ArrayList<Node>(path);
		    }
		} else {
		    dfs(root.left, preSum, path, res);
		    dfs(root.right, preSum, path, res);
		}
		path.remove(path.size() - 1);
		
		return;
	}
